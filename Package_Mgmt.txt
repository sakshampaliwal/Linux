Some terms:

In the past, Linux users had to download the source code, compile it into binary files, and then add it to their system as software. 
Occasionally, users could find the software already compiled and packaged as a tarball. 
A tarball is a compressed file that contains multiple files, such as executables, configuration files, documentation, and libraries, making it convenient for storage and distribution.
After software installation, the files spread across the system in relevant directories. However, the method of creating tarball may seem easy, but the 
installation process makes some tasks difficult.

It requires the user to independently/manually track down the dependencies for the installing software such that the dependent software itself has some dependencies.
Since tarball package installation spreads the files, it won’t be easy to locate the package documentation and configuration files even if the user knows the commands.
It’s hard to locate files to uninstall software.

To overcome these problems, software packaging in the Linux distributions evolved into two packaging formats known as DEB and RPM packaging.

1. Packages: 
   A package contains all the necessary data required for the installation and maintenance of the software package. These packages are created by someone known as a package maintainer.

2. Dependencies:   
   Some packages might require some other pre-installed software to function correctly. A resource or software that a package depends on is called its dependency.
   The package manager takes care of all these problems for you. It will install, modify, upgrade, update, and remove package files and provide dependency resolution. 

3. Package Manager:
   It is a software tool used for package management in Linux i.e. to manage the installation, removal, and updating of various software packages. 
   It can be thought of as a hub for all software packages available for your system. 
   The package manager keeps track of all the installed packages on the system, including their dependencies, and uses this information to resolve conflicts and handle updates.

Package Manager vs Installers:
1. An installer is a software tool used to install a specific piece of software on a Linux system.
   whereas Package managers are used to install, update, and remove software packages, as well as manage dependencies and repositories.
2. Package managers can update multiple packages at once, and can handle dependencies and conflicts automatically 
   whereas Installers may require manual updates or may not support updates at all, which can lead to security vulnerabilities.



Debian Based Distro(Linux Mint, Ubuntu, Kali Linux, Parrot OS)
Fedora Based Distro(CentOS, RHEL)

Debian Based Package Managers: 

1. APT(Advanced Package Tool):  It acts as a front-end to the lower-level dpkg package manager, which is used for installing, managing, and providing information on .deb packages.
   Commands:
   Fetch Updates: > sudo apt update
   To upgrade all packages: sudo apt upgrade
   To list all packages: apt list
   To see list of all upgradable packages: apt list --upgradable
   Install New Package: sudo apt install {pkgNameHere}
   Remove Package: sudo apt remove {pkgNameHere}
   Remove package with config files: sudo apt purge {pkgNameHere}  //Removing a package removes all packaged data, but leaves usually small (modified) user configuration files behind.
   Remove packages installed automatically: sudo apt autoremove  //automatically installed to satisfy dependencies for other packages and are now no longer needed.
   Search Packages: apt search php

2. dpkg: dpkg is a low-level package manager used in Debian-based Linux distributions to manage individual software packages. 
   It stands for "Debian Package." dpkg is a command-line tool that works directly with the Debian package format (.deb)
   Debian-based systems use .deb files as the package format. These files contain binary and configuration data for the software.


Fedora Based Package Manager:

1. rpm:
   -RPM stands for "Red Hat Package Manager."
   -The name, RPM, was derived from the .rpm file format. The manager was designed to be used for Linux distributions. 
    Initially, it was made to be used in Red Hat Linux. Now, it’s widely used in other Linux distributions including Fedora, CentOS, OpenSUSE, OpenMandriva, and Oracle Linux. 
    Most RPM files are binary with the compiled version of the software.
   -When you remove a package using RPM, you can get rid of it cleanly with almost no remaining trace. When you uninstall, 
    it automatically checks dependencies and removes the package safely.
   -Only root or users with sudo privileges can install or remove RPM packages.
   -The main downside is that it doesn't resolve package dependencies or automatic package updates.

2. yum:
   -Yum stands for Yellowdog Updater Modified.
   -It is an open-source Linux package management application that uses the RPM package manager
   -YUM's benefits over RPM are automatic updates, easy package management and dependency management.
   -YUM is a much better option than RPM when performing a batch installation. Since YUM utilizes online repositories, it only requires the package names. 
   -The downside of YUM is that it does not allow to install multiple package versions. Also, it only supports packages available in the repository.
    RPM allows to install multiple packages and versions, but it requires the full file name with the .rpm extension. Still, it does not solve the dependencies for the installed packages.
   -Installing a package with YUM only requires the package name, and doesn't require the package location. 
    The tool searches the repositories listed in the repo files from the /etc/yum.repos.d/ directory and installs the latest package version available.
    RPM doesn't support repositories, installing a package requires the full package file name and location. 
   

dpkg command:
- It is a tool that is used in debian based OS.
- It handles the installation, removal, and management of individual .deb packages on the system.
- It is used to interact with packages on our system. 
- Syntax: dpkg [options] [.deb package name]
- options:
  -i -> to install
  -r -> to remove
  -u -> to update
  -s -> to show status

apt-get update:
- This command updates the local database of available packages but does not install or upgrade any packages.
- 

apt-get update vs upgrade:

- sudo apt-get update, it updates the package sources list with the latest versions of the packages in the repositories.
  Package sources list contains the locations or URLs of some of the repositories from which a package is installed.
  You can view list: cat /etc/apt/sources.list
  One such location in these repositories is /ubuntu/dists/bionic-updates/main/source 

- So, whenever we type in apt update it browses these lists from the repositories and copies the latest version of them to the local system. 
  It actually doesn't install any package on the system.

- "apt upgrade" compares the version of all the packages currently installed on the system with the ones in the list we fetched through apt update and upgrades all of them to their latest versions.

- when upgrading all the packages in the system, we merge both apt update and apt upgrade commands in a single line:
  sudo apt update && sudo apt upgrade

- You should first run update, then upgrade


apt-get clean:
- In Ubuntu and Debian operating systems, while using apt-get for installation or up-gradation of packages, the installer packages are downloaded from the remote repositories to local storage in your system.
- The downloaded packages are in .deb format and they are saved in var/cache/apt/archives/ directory. The system keeps these installer packages in local storage even after you uninstall them. 
- when we install a package using apt-get, the following happens:
  It checks if the required package needs a dependency package; what are those packages and whether they are installed or not.
  Download the package and its dependencies.
  Install the package.
- If you upgrade the package, its new version is similarly downloaded and kept on the local storage. After you install or after upgradation you don't need that installer .deb file anymore because you have already installed from it.
  So, It’s a good idea to remove these files as they are taking your system space.
- The package files are stored in the cache directory to speed up future installations. Over time, these files can take up significant space on your system.
  Using the sudo apt-get clean command removes all the package files from the cache directory, freeing up disk space. 
- The command only removes package files stored in the cache directory, not installed packages.
- E.g: sudo apt-get clean


apt-cache search:
- It is a command that allows you to explore the available software packages in your system's repositories.
- Searches the local package cache for packages matching a given keyword or name.
- Syntax: apt-cache search <keyword>


Two ways to remove package:
1. remove
2. purge

apt remove:
- It is used to uninstall or remove a package from your system.
- This command uninstalls a package from your system while keeping its configuration files intact. 
- Syntax: sudo apt remove <package-name>
- To remove multiple packages: sudo apt remove package_1 package_2 package_3
- To list all installed packages: apt list --installed

apt autoremove:
- It is used to remove packages that were automatically installed as dependencies for other software but are no longer needed.
- When you install a program, it often requires other packages (dependencies) to function correctly. However, if you later remove that program, those dependencies might remain on your system, taking up space unnecessarily.

apt purge:
- It not only removes the package but also deletes the configuration files associated with it.
- Using purge ensures that when you reinstall the package later, it will be as if it were installed for the first time, without any residual configuration from the previous installation. 
- Syntax: sudo apt purge <package_name>

rpm command:
- It is used for package management in RPM-based (Red Hat Package Manager) distributions.
- It's a powerful tool for installing, querying, verifying, updating, and removing software packages on these systems.

Installation & Update:
- -i (install): Installs a package from a file or repository.
- -U (update): Updates an existing package to a newer version.
- -v (verbose): Shows more detailed information during installation/update.
- -h (hash marks): Displays progress bar with hash marks.

Removal & Verification:
- -e (erase): Uninstalls a package.
- -V (verify): Verifies the integrity of installed packages.
- -c (checksig): Checks the digital signature of a package file.

Information & Query:
- -q (query): Displays information about installed packages.
- -a (all): Lists all installed packages.
- -f (file): Finds which package owns a specific file.
- -p (package): Lists files included in a package.
- -R (requires): Displays a package's dependencies.


Remaining:
dnf list
yum list installed
alien --to-deb ...